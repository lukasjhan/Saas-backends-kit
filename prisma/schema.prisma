// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([userId])
}

model Log {
  id        Int      @id @default(autoincrement())
  level     LogLevel
  message   String
  category  String
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([category])
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

model File {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  mimetype  String
  size      Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Notification {
  id        Int             @id @default(autoincrement())
  userId    String
  title     String
  content   String
  type      NotificationType
  createdAt DateTime        @default(now())
  readAt    DateTime?
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

model Subscription {
  id               Int      @id @default(autoincrement())
  userId           String
  plan             Plan
  amount           Float
  currency         String
  startDate        DateTime
  endDate          DateTime
  nextBillingDate  DateTime
  status           SubscriptionStatus
  paymentMethodId  Int
  paymentMethod    PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model PaymentMethod {
  id             Int      @id @default(autoincrement())
  userId         String
  type           PaymentMethodType
  lastFourDigits String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subscriptions  Subscription[]
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
}

model User {
  id            Int       @id @default(autoincrement())
  userId        String    @unique
  email         String    @unique
  name          String?
  profilePicture String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}